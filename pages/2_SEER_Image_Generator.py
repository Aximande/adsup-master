import streamlit as st
import replicate
import os
from dotenv import load_dotenv
from utils import load_custom_css

# R√©cup√©rer le token Replicate depuis les variables de streamlit
REPLICATE_API_TOKEN = st.secrets["REPLICATE_API_TOKEN"]

if not REPLICATE_API_TOKEN:
    st.error("Le token API Replicate n'est pas configur√©. Veuillez le d√©finir dans les secrets de l'application Streamlit.")
    st.stop()

# Initialiser le client Replicate
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

# Configuration de la page avec un th√®me personnalis√© via config.toml
st.set_page_config(
    page_title="Alfred - Le 1er Assistant au service de SEER pour la G√©n√©ration d'Images",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Charger le CSS personnalis√©
load_custom_css()

# Initialiser les variables de session
if 'final_prompt' not in st.session_state:
    st.session_state.final_prompt = ""
if 'enhanced_prompt' not in st.session_state:
    st.session_state.enhanced_prompt = ""
if 'history' not in st.session_state:
    st.session_state.history = []
if 'selected_prompt' not in st.session_state:
    st.session_state.selected_prompt = "Aucun"
if 'custom_prompt' not in st.session_state:
    st.session_state.custom_prompt = ""
if 'text_to_add' not in st.session_state:
    st.session_state.text_to_add = ""
if 'typography_options' not in st.session_state:
    st.session_state.typography_options = []
if 'language' not in st.session_state:
    st.session_state.language = "Fran√ßais"

# Fonction pour r√©initialiser tous les champs
def reset_inputs():
    st.session_state.final_prompt = ""
    st.session_state.enhanced_prompt = ""
    st.session_state.selected_prompt = "Aucun"
    st.session_state.custom_prompt = ""
    st.session_state.text_to_add = ""
    st.session_state.typography_options = []
    st.session_state.language = "Fran√ßais"

# Fonction pour copier le texte dans le presse-papiers via JavaScript
def copy_to_clipboard(text):
    copy_button = f"""
    <div>
        <input type="text" value="{text}" id="copyText" readonly style="position: absolute; left: -9999px;">
        <button onclick="copyFunction()">üìã Copier le Prompt</button>
        <script>
            function copyFunction() {{
                var copyText = document.getElementById("copyText");
                copyText.select();
                copyText.setSelectionRange(0, 99999); /* For mobile devices */
                document.execCommand("copy");
                alert("Prompt copi√© dans le presse-papiers!");
            }}
        </script>
    </div>
    """
    st.markdown(copy_button, unsafe_allow_html=True)

# Titre de l'application avec logo et lien
def display_header():
    col_logo, col_title = st.columns([1, 3])
    with col_logo:
        # Ajouter le logo du client (Ad's up consulting)
        logo_path = "adsup-logo.png"
        if os.path.exists(logo_path):
            st.image(logo_path, width=150, use_column_width=False, caption=None)
        else:
            st.warning("Logo Ad's up consulting non trouv√©. Assurez-vous que 'adsup-logo.png' est dans le dossier racine du projet.")
    with col_title:
        st.markdown("""
        <h1 style='text-align: center; color: #FFFFFF;'>Alfred - Le 1er Assistant au service de SEER pour la G√©n√©ration d'Images</h1>
        <p style='text-align: center; color: #555555;'>
            <a href="https://www.ads-up.fr/" target="_blank">Visitez le site web de Ad's up consulting</a>
        </p>
        """, unsafe_allow_html=True)

    # Section introductive
    st.markdown("""
    <div class="section">
        <p style='font-size: 16px; color: #FFFFFF;'>
            Cr√©ez des images uniques avec l'intelligence artificielle via le mod√®le derni√®re g√©n√©ration FLUX.PRO de Black Forest Labs, mis √† disposition de l'√©quipe SEER d'Ad's up consulting.
        </p>
    </div>
    """, unsafe_allow_html=True)

# Afficher le header
display_header()

# Cr√©ation de deux colonnes pour le contenu principal
col1, col2 = st.columns([2, 1])

with col1:
    st.header("Cr√©ation du Prompt")

    # S√©lecteur de langue
    language = st.radio("üåê S√©lectionnez la langue du prompt", ["Fran√ßais", "Anglais"], index=0)
    st.session_state.language = language

    # Librairie de Prompts
    st.subheader("Choisissez un Prompt ou Entrez le V√¥tre")

    predefined_prompts_fr = [
        "Un paysage magnifique avec des montagnes en arri√®re-plan et un lac serein refl√©tant le ciel.",
        "Une ville futuriste la nuit avec des n√©ons lumineux et des voitures volantes.",
        "Un astronaute flottant dans l'espace avec une vue sur la Terre derri√®re lui.",
        "Un portrait rapproch√© d'une personne avec un maquillage artistique et une coiffe √©labor√©e."
    ]

    predefined_prompts_en = [
        "A beautiful landscape with mountains in the background and a serene lake reflecting the sky.",
        "A futuristic city at night with bright neon lights and flying cars.",
        "An astronaut floating in space with a view of Earth behind him.",
        "A close-up portrait of a person with artistic makeup and an elaborate headdress."
    ]

    predefined_prompts = predefined_prompts_fr if language == "Fran√ßais" else predefined_prompts_en

    selected_prompt = st.selectbox(
        "üìö Prompts Pr√©d√©finis",
        ["Aucun"] + predefined_prompts,
        index=0,
        help="S√©lectionnez un prompt pr√©d√©fini pour g√©n√©rer une image correspondant √† ce th√®me."
    )

    # Champ de saisie libre
    custom_prompt = st.text_area(
        "‚úçÔ∏è Ou entrez votre propre prompt",
        height=100,
        placeholder="Entrez votre description ici...",
        help="Saisissez une description d√©taill√©e pour g√©n√©rer une image personnalis√©e."
    )

    # Logique pour d√©terminer le prompt final
    if selected_prompt != "Aucun" and custom_prompt.strip() != "":
        st.warning("‚ö†Ô∏è Veuillez choisir soit un prompt pr√©d√©fini, soit entrer votre propre prompt, pas les deux.")
        st.session_state.final_prompt = ""
    elif selected_prompt != "Aucun":
        st.session_state.final_prompt = selected_prompt
    elif custom_prompt.strip() != "":
        st.session_state.final_prompt = custom_prompt
    else:
        st.session_state.final_prompt = ""

    # Section pour ajouter du texte √©crit avec typographie
    st.subheader("üñãÔ∏è Ajouter du Texte √† l'Image")

    # Option pour le texte √† ajouter
    text_to_add = st.text_input(
        "‚úèÔ∏è Texte √† Ajouter",
        value="",
        help="Entrez le texte que vous souhaitez ajouter √† l'image."
    )

    with st.expander("üé® Options de Typographie", expanded=False):
        # Typographie Options (Personnalisables)
        typography_options = [
            "Random",
            "Bold",
            "Italic",
            "Underlined",
            "Shadow",
            "3D",
            "Gradient",
            "Handwritten",
            "Calligraphy",
            "Graffiti",
            "Vintage",
            "Futuristic",
            "Neon",
            "Glow",
            "Comic",
            "Stencil",
            "Watercolor",
            "Chalk",
            "Marker",
            "Spray Paint"
        ]

        selected_typography_options = st.multiselect(
            "üî† Options de Typographie",
            typography_options,
            default=[],
            help="S√©lectionnez les options de typographie √† appliquer au texte ajout√©."
        )

    # Fonction pour construire les instructions de typographie
    def construct_typography_instruction(options):
        if options:
            return f" with typography styles: {', '.join(options)}"
        else:
            return ""

    # Construire l'instruction de typographie
    typography_instruction = construct_typography_instruction(selected_typography_options)

    # Section pour valider le prompt final
    st.subheader("üìù Valider le Prompt Final")

    # Construire le prompt final avec les instructions de typographie
    if st.session_state.final_prompt:
        base_prompt = st.session_state.final_prompt
        if text_to_add.strip():
            if typography_instruction:
                final_prompt_display_with_text = f"{base_prompt}. Add the text '{text_to_add}' written in a legible way on the image{typography_instruction}."
            else:
                final_prompt_display_with_text = f"{base_prompt}. Add the text '{text_to_add}' written in a legible way on the image."
        else:
            final_prompt_display_with_text = base_prompt

        # Champ modifiable pour le prompt final
        final_prompt_editable = st.text_area(
            "üñãÔ∏è Prompt Final",
            value=final_prompt_display_with_text,
            height=100,
            help="Modifiez le prompt final ici avant la g√©n√©ration de l'image."
        )

        # Bouton pour copier le prompt
        copy_to_clipboard(final_prompt_editable)
    else:
        st.warning("‚ö†Ô∏è Veuillez s√©lectionner ou entrer un prompt pour continuer.")
        final_prompt_editable = ""

with col2:
    st.header("‚öôÔ∏è Param√®tres de G√©n√©ration ‚öôÔ∏è")

    # Mod√®le √† utiliser (fix√© √† 'black-forest-labs/flux-pro')
    selected_model = "black-forest-labs/flux-pro"

    st.write(f"üß† Mod√®le s√©lectionn√©: Flux Pro ({selected_model})")

    # Param√®tres sp√©cifiques du mod√®le
    steps = st.slider(
        "üîÑ Nombre d'√©tapes (steps)",
        min_value=1,
        max_value=50,
        value=25,
        step=1,
        help="Nombre d'√©tapes de diffusion."
    )

    guidance = st.slider(
        "üìà Guidance",
        min_value=2.0,
        max_value=5.0,
        value=3.0,
        step=0.1,
        help="Contr√¥le l'√©quilibre entre l'adh√©sion au prompt et la qualit√©/diversit√© de l'image."
    )

    interval = st.slider(
        "‚è≥ Interval",
        min_value=1,
        max_value=4,
        value=2,
        step=1,
        help="Ajuste la variance dans les sorties possibles."
    )

    safety_tolerance = st.slider(
        "üõ°Ô∏è Safety Tolerance",
        min_value=1,
        max_value=5,
        value=2,
        step=1,
        help="Tol√©rance de s√©curit√©, 1 est le plus strict et 5 le plus permissif."
    )

    # Aspect Ratio
    aspect_ratio = st.selectbox(
        "üìê Aspect Ratio",
        ["1:1", "16:9", "4:3", "custom"],
        index=0,
        help="Ratio d'aspect pour l'image g√©n√©r√©e."
    )

    # Dimensions personnalis√©es
    if aspect_ratio == "custom":
        width = st.number_input(
            "üìè Largeur",
            min_value=256,
            max_value=1024,
            value=512,
            step=64,
            help="Largeur de l'image g√©n√©r√©e."
        )
        height = st.number_input(
            "üìê Hauteur",
            min_value=256,
            max_value=1024,
            value=512,
            step=64,
            help="Hauteur de l'image g√©n√©r√©e."
        )
    else:
        # D√©finitions des dimensions selon le ratio choisi
        width = None
        height = None

    # Format de l'image de sortie
    output_format = st.selectbox(
        "üñºÔ∏è Format de l'image de sortie",
        ["webp", "jpg", "png"],
        index=0,
        help="Format des images g√©n√©r√©es."
    )

    output_quality = st.slider(
        "üéöÔ∏è Qualit√© de l'image (output_quality)",
        min_value=0,
        max_value=100,
        value=80,
        step=1,
        help="Qualit√© lors de la sauvegarde des images de sortie, de 0 √† 100."
    )

    # Seed optionnelle
    seed_input = st.text_input(
        "üå± Seed (optionnel)",
        value="",
        help="Seed al√©atoire. D√©finissez-le pour une g√©n√©ration reproductible."
    )
    seed = int(seed_input) if seed_input.strip().isdigit() else None

    # Bouton de g√©n√©ration
    if st.button("üöÄ G√©n√©rer l'Image"):
        if not final_prompt_editable.strip():
            st.error("‚ùå Veuillez entrer un prompt valide.")
        else:
            with st.spinner("üñºÔ∏è G√©n√©ration en cours..."):
                try:
                    # Pr√©parer les param√®tres d'entr√©e
                    input_params = {
                        "prompt": final_prompt_editable,
                        "steps": steps,
                        "guidance": guidance,
                        "interval": interval,
                        "aspect_ratio": aspect_ratio,
                        "output_format": output_format,
                        "output_quality": output_quality,
                        "safety_tolerance": safety_tolerance,
                    }

                    if seed is not None:
                        input_params["seed"] = seed

                    if aspect_ratio == "custom":
                        if width and height:
                            input_params["width"] = width
                            input_params["height"] = height
                        else:
                            st.error("‚ùå Veuillez sp√©cifier la largeur et la hauteur pour un aspect ratio personnalis√©.")
                            st.stop()

                    # Appeler l'API Replicate
                    output = replicate_client.run(
                        selected_model,
                        input=input_params
                    )

                    # Afficher l'image g√©n√©r√©e
                    if isinstance(output, str):
                        st.success("‚úÖ Image g√©n√©r√©e avec succ√®s !")
                        st.image(output, use_column_width=True, caption="üñºÔ∏è Image g√©n√©r√©e")
                        # Ajouter √† l'historique
                        st.session_state.history.append({
                            "prompt": final_prompt_editable,
                            "images": [output]
                        })
                    else:
                        st.error("‚ùå Format de r√©ponse inattendu.")
                except replicate.exceptions.ReplicateError as e:
                    st.error(f"‚ùå Erreur Replicate : {e}")
                except Exception as e:
                    st.error(f"‚ùå Une erreur est survenue : {e}")

    # Bouton de r√©initialisation
    if st.button("üîÑ R√©initialiser"):
        reset_inputs()
        st.success("‚úÖ Tous les champs ont √©t√© r√©initialis√©s.")
